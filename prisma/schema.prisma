// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
  SUPER_ADMIN
}

enum UserGender {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  role               UserRole   @default(PATIENT)
  status             UserStatus @default(ACTIVE)
  isDelete           Boolean    @default(false)
  password           String
  needPasswordChange Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  admin   Admin?
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              UserGender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean             @default(false)
  averageRating       Float               @default(0.0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [email], references: [email])
  doctorSpecialties   DoctorSpecialties[]
  doctorSchedules     DoctorSchedules[]

  @@map("doctors")
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(references: [email], fields: [email])
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]

  @@map("patients")
}

model Specialties {
  id    String @id @default(uuid())
  title String
  icon  String

  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  specialitiesId String
  doctorId       String

  specialties Specialties @relation(fields: [specialitiesId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              UserGender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("madical_reports")
}

model Schedule {
  id             String            @id @default(uuid())
  startDateTime      DateTime
  endDateTime        DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  doctorSchedule DoctorSchedules[]
}

model DoctorSchedules {
  doctorId      String
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean  @default(false)
  appointmentId String?

  @@id([doctorId, scheduleId])
  @@map("doctor_schedule")
}
